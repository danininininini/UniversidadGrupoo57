/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package universidadgrupo57.Vistas;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import universidadgrupo57.AccesoADatos.AlumnoData;
import universidadgrupo57.AccesoADatos.InscripcionData;
import universidadgrupo57.AccesoADatos.MateriaData;
import universidadgrupo57.Entidades.Alumno;
import universidadgrupo57.Entidades.Inscripcion;
import universidadgrupo57.Entidades.Materia;


public class NotaView extends javax.swing.JFrame {
     private Alumno alumno;
    private DefaultTableModel notasModelo;
    private AlumnoData alumnoData;
    private int idMateria;
    private MateriaData materiaData;
    private InscripcionData inscripcionData;
    private String data[][];

   
    public NotaView() {
        initComponents();
        
        
        this.inscripcionData = new InscripcionData();
        
        this.alumnoData = new AlumnoData();
        
        List<Alumno> alumnos = alumnoData.listarAlumnos();
        
        for (Alumno alumno : alumnos) {
            alumnoComboBox.addItem(alumno.getDni() + ", " + alumno.getApellido() + ", " +alumno.getNombre()+", "+ alumno.getFechaNacimiento());
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        alumnoComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        notasTabla = new javax.swing.JTable();
        guardarButton = new javax.swing.JButton();
        sallirButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMinimumSize(new java.awt.Dimension(416, 335));

        jPanel2.setBackground(new java.awt.Color(51, 153, 255));
        jPanel2.setMinimumSize(new java.awt.Dimension(420, 30));
        jPanel2.setPreferredSize(new java.awt.Dimension(420, 30));

        jLabel2.setFont(new java.awt.Font("Segoe UI Symbol", 2, 18)); // NOI18N
        jLabel2.setText("Notas");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 5, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel3.setText("Manipulaci√≥n de notas");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 2, 13)); // NOI18N
        jLabel1.setText("Seleccione un alumno:");

        alumnoComboBox.setBorder(null);
        alumnoComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        alumnoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alumnoComboBoxActionPerformed(evt);
            }
        });

        notasTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Codigo", "Nombre", "Nota"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        notasTabla.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        notasTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notasTablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(notasTabla);

        guardarButton.setBackground(new java.awt.Color(51, 153, 255));
        guardarButton.setText("Guardar");
        guardarButton.setBorder(null);
        guardarButton.setBorderPainted(false);
        guardarButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        guardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarButtonActionPerformed(evt);
            }
        });

        sallirButton.setBackground(new java.awt.Color(51, 153, 255));
        sallirButton.setText("Salir");
        sallirButton.setBorder(null);
        sallirButton.setBorderPainted(false);
        sallirButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sallirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sallirButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(alumnoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(guardarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(sallirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(alumnoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sallirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void guardarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarButtonActionPerformed
        //obtiene el numero de filas en la tabla 
        int tamaniotabla = notasTabla.getModel().getRowCount();
        //verifica si se est√° editando una celda en la tabla
        try{
        if (notasTabla.isEditing()) {
            notasTabla.getCellEditor().stopCellEditing();
        }
        //recorre cada fila de la tabla
        for (int i = 0; i < tamaniotabla; i++) {
         //obtiene el nuevo valor de la nota desde la celda en la columna 2 y convierte a double
            double nuevaNota = Double.parseDouble(notasTabla.getModel().getValueAt(i, 2).toString());
         //obtiene el ID de la materia desde la celda en la columna 0 y lo convierte a int
            int idMateria = Integer.parseInt(notasTabla.getModel().getValueAt(i, 0).toString());
         //compara la nota actual almacenada en la matriz data con la nueva nota en la tabla 
         //si son diferentes, significa que la nota se modifico y tiene que actualizarse en la base de datos
            if (data[i][2] != notasTabla.getModel().getValueAt(i, 2).toString()) {
         //si la nota fue modificada se llama a actualizar nota para actualizarla en la base de datos
         //pasa el id del alumno, de la materia y la nueva nota como argumento
                inscripcionData.actualizarNota(alumno.getIdAlumno(), idMateria, nuevaNota);
            }
        }
    }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Ingrese s√≥lo n√∫meros");
    
    }
    }//GEN-LAST:event_guardarButtonActionPerformed

    private void alumnoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alumnoComboBoxActionPerformed
        //se obtiene el elemento seleccionado en el combobox y se convierte en una cadena de texto
        String selec = alumnoComboBox.getSelectedItem().toString();
        //busca la primera posicion de la coma en la cadena selec y la guarda en la variable coma
        int coma = selec.indexOf(',');
        //si no encuentra coma, ser√° igual a -1, si no es igual a -1 significa que encontro una coma en la cadena
        if (coma != -1) {
        //substring extrae desde el indice cero hasta que haya una coma y lo guarda en numero
        //contendra el numero del dni como cadena
            String numero = selec.substring(0, coma);
        //se lo parsea a int    
            int primernro = Integer.parseInt(numero);
            
            AlumnoData alumnoData = new AlumnoData();
         //se llama a buscar alumno y se pasa el argumento dni que esta guardado en primernro
         //se lo asigna a la variable alumno
            alumno = alumnoData.buscarAlumnoPorDni(primernro);
         //busca las inscripciones relacionadas con el alumno   
            List<Inscripcion> insc =  inscripcionData.obtenerInscripcionesPorAlumno(alumno.getIdAlumno());
                    
                            
         //rellena la tabla con la info del paso anterior   
            rellenarTabla(insc);
        }
    }//GEN-LAST:event_alumnoComboBoxActionPerformed

    private void notasTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notasTablaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_notasTablaMouseClicked

    private void sallirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sallirButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_sallirButtonActionPerformed

   
    public void rellenarTabla(List<Inscripcion> insc) {
    //arreglo de columnas para ponerles nombres
        String columnas[] = {
        "C√≥digo", "Nombre", "Nota"
    };
    //matriz para almacenar datos de las inscripciones
    //tiene tres columnas para codigo, nombre y nota
    data = new String[insc.size()][3];
   //bucle para recorrer inscripciones
    for (int i = 0; i < insc.size(); i++) {
        Inscripcion Inscripcion = insc.get(i);
   //se almacena codigo de la materia en la columna 0     
        data[i][0] = String.valueOf(Inscripcion.getMateria().getIdMateria());
  // se almacena nombre de la materia en columna 1      
        data[i][1] = Inscripcion.getMateria().getNombre();
 // se almacena nota de la inscripcion en la columna 2       
        data[i][2] = String.valueOf(Inscripcion.getNota());
    }

    notasModelo = new DefaultTableModel(data, columnas);

    notasTabla.setModel(notasModelo);
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NotaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NotaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NotaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NotaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NotaView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> alumnoComboBox;
    private javax.swing.JButton guardarButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable notasTabla;
    private javax.swing.JButton sallirButton;
    // End of variables declaration//GEN-END:variables
}
